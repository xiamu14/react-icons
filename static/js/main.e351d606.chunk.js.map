{"version":3,"sources":["react-icons.svg","App.js","registerServiceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","IconsView","_ref","icons","id","Object","keys","filter","name","toLocaleLowerCase","startsWith","map","Icon","react_default","a","createElement","className","key","history","createHashHistory","App","esm","Provider","value","color","Router","src","logo","alt","NavLink","to","exact","IconsManifest","icon","concat","Switch","Route","path","href","rel","licenseUrl","target","license","projectUrl","Icons","Component","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","catch","error","ReactDOM","render","src_App_0","document","getElementById","URL","process","origin","addEventListener","fetch","response","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.e351d606.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/react-icons.966a74a6.svg\";","import React, { Component } from \"react\";\n\nimport { Route, NavLink } from \"react-router-dom\";\nimport { Router, Switch } from \"react-router\";\nimport { createHashHistory } from \"history\";\n\nimport { IconsManifest, IconContext } from \"react-icons\";\nimport * as Icons from \"react-icons/all\";\n\nimport logo from \"./react-icons.svg\";\nimport \"./App.css\";\n\nfunction IconsView({ icons, id }) {\n  return Object.keys(icons)\n    .filter(name => name.toLocaleLowerCase().startsWith(id))\n    .map(name => {\n      const Icon = icons[name];\n      return (\n        <div className=\"item\" key={name}>\n          <div className=\"body\">\n            <Icon />\n          </div>\n          <div className=\"name\">{name}</div>\n        </div>\n      );\n    });\n}\n\nconst history = createHashHistory({});\n\nclass App extends Component {\n  render() {\n    return (\n      <IconContext.Provider value={{ color: \"#333\" }}>\n        <Router history={history}>\n          <div className=\"App\">\n            <div className=\"sidebar\">\n              <header>\n                <img src={logo} alt=\"react-icons\" />\n                <span>react-icons</span>\n              </header>\n              <ul className=\"links\">\n                <li>\n                  <NavLink to=\"/\" exact={true}>\n                    Home\n                  </NavLink>\n                </li>\n                {IconsManifest.map(icon => (\n                  <li key={icon.id}>\n                    <NavLink to={`/icons/${icon.id}`}>{icon.name}</NavLink>\n                  </li>\n                ))}\n              </ul>\n            </div>\n            <div className=\"content\">\n              <Switch>\n                <Route path=\"/\" exact={true}>\n                  <article>\n                    <h1>React Icons</h1>\n                    <p>\n                      <a\n                        href=\"https://www.npmjs.com/package/react-icons\"\n                        rel=\"nofollow\"\n                      >\n                        <img\n                          src=\"https://img.shields.io/npm/v/react-icons.svg\"\n                          alt=\"npm\"\n                        />\n                      </a>{\" \"}\n                      <a\n                        href=\"https://travis-ci.com/react-icons/react-icons\"\n                        rel=\"nofollow\"\n                      >\n                        <img\n                          src=\"https://travis-ci.com/react-icons/react-icons.svg?branch=master\"\n                          alt=\"travis ci\"\n                        />\n                      </a>\n                    </p>\n                    <p>\n                      Include popular icons in your React projects easly with\n                      react-icons, which utilizes ES6 imports that allows you to\n                      include only the icons that your project is using.\n                    </p>\n                    <h2>Installation</h2>\n                    <code>\n                      <pre>npm install react-icons --save</pre>\n                    </code>\n                    <h2>Usage</h2>\n                    <code>\n                      <pre>\n                        {`import { FaBeer } from 'react-icons/fa';\n\nclass Question extends React.Component {\n  render() {\n    return <h3> Lets go for a <FaBeer />? </h3>\n  }\n}`}\n                      </pre>\n                    </code>\n                    <h2>More info</h2>\n                    <p>\n                      <a href=\"https://github.com/react-icons/react-icons\">\n                        Github\n                      </a>\n                    </p>\n                    <p />\n                  </article>\n                </Route>\n                {IconsManifest.map(icon => (\n                  <Route key={icon.id} path={`/icons/${icon.id}`}>\n                    <article className=\"icons-article\">\n                      <h1>{icon.name}</h1>\n                      <table>\n                        <tbody>\n                          <tr>\n                            <th>License</th>\n                            <td>\n                              <a href={icon.licenseUrl} target=\"_blank\" rel=\"noopener noreferrer\">\n                                {icon.license}\n                              </a>\n                            </td>\n                          </tr>\n                          <tr>\n                            <th>Project</th>\n                            <td>\n                              <a href={icon.projectUrl} target=\"_blank\" rel=\"noopener noreferrer\">\n                                {icon.projectUrl}\n                              </a>\n                            </td>\n                          </tr>\n                        </tbody>\n                      </table>\n                      <div className=\"example-code\">\n                        <code>\n                          <pre>\n                            {`import { ICON_NAME } from \"react-icons/${\n                              icon.id\n                            }\";`}\n                          </pre>\n                        </code>\n                      </div>\n                      <div className=\"icons\">\n                        <IconsView icons={Icons} id={icon.id} />\n                      </div>\n                    </article>\n                  </Route>\n                ))}\n              </Switch>\n            </div>\n          </div>\n        </Router>\n      </IconContext.Provider>\n    );\n  }\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://goo.gl/SC7cgQ\"\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log(\"New content is available; please refresh.\");\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get(\"content-type\").indexOf(\"javascript\") === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport registerServiceWorker from \"./registerServiceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\nregisterServiceWorker();\n"],"sourceRoot":""}